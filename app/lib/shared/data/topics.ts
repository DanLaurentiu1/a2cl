import { Topic, TopicTypes } from "../../domain/Topic";

export const ALL_TOPICS: readonly Topic[] = [
  new Topic("Binary Tree", TopicTypes.DataStructures),
  new Topic("Matrix", TopicTypes.DataStructures),
  new Topic("Array", TopicTypes.DataStructures),
  new Topic("Linked List", TopicTypes.DataStructures),
  new Topic("Monotonic Queue", TopicTypes.DataStructures),
  new Topic("String", TopicTypes.DataStructures),
  new Topic("Union Find", TopicTypes.DataStructures),
  new Topic("Binary Search Tree", TopicTypes.DataStructures),
  new Topic("Segment Tree", TopicTypes.DataStructures),
  new Topic("Hash Table", TopicTypes.DataStructures),
  new Topic("Binary Indexed Tree", TopicTypes.DataStructures),
  new Topic("Heap (Priority Queue)", TopicTypes.DataStructures),
  new Topic("Monotonic Stack", TopicTypes.DataStructures),
  new Topic("Graph", TopicTypes.DataStructures),
  new Topic("Tree", TopicTypes.DataStructures),
  new Topic("Trie", TopicTypes.DataStructures),
  new Topic("Ordered Set", TopicTypes.DataStructures),
  new Topic("Doubly-Linked List", TopicTypes.DataStructures),
  new Topic("Stack", TopicTypes.DataStructures),
  new Topic("Queue", TopicTypes.DataStructures),
  new Topic("Suffix Array", TopicTypes.DataStructures),

  new Topic("Two Pointers", TopicTypes.Algorithms),
  new Topic("Divide and Conquer", TopicTypes.Algorithms),
  new Topic("Radix Sort", TopicTypes.Algorithms),
  new Topic("Topological Sort", TopicTypes.Algorithms),
  new Topic("Minimum Spanning Tree", TopicTypes.Algorithms),
  new Topic("Bucket Sort", TopicTypes.Algorithms),
  new Topic("Line Sweep", TopicTypes.Algorithms),
  new Topic("Breadth-First Search", TopicTypes.Algorithms),
  new Topic("Counting Sort", TopicTypes.Algorithms),
  new Topic("Quickselect", TopicTypes.Algorithms),
  new Topic("Binary Search", TopicTypes.Algorithms),
  new Topic("Sorting", TopicTypes.Algorithms),
  new Topic("Depth-First Search", TopicTypes.Algorithms),
  new Topic("Merge Sort", TopicTypes.Algorithms),

  new Topic("String Matching", TopicTypes.Concepts),
  new Topic("Reservoir Sampling", TopicTypes.Concepts),
  new Topic("Bit Manipulation", TopicTypes.Concepts),
  new Topic("Data Stream", TopicTypes.Concepts),
  new Topic("Randomized", TopicTypes.Concepts),
  new Topic("Database", TopicTypes.Concepts),
  new Topic("Number Theory", TopicTypes.Concepts),
  new Topic("Bitmask", TopicTypes.Concepts),
  new Topic("Math", TopicTypes.Concepts),
  new Topic("Rejection Sampling", TopicTypes.Concepts),
  new Topic("Iterator", TopicTypes.Concepts),
  new Topic("Eulerian Circuit", TopicTypes.Concepts),
  new Topic("Enumeration", TopicTypes.Concepts),
  new Topic("Biconnected Component", TopicTypes.Concepts),
  new Topic("Greedy", TopicTypes.Concepts),
  new Topic("Combinatorics", TopicTypes.Concepts),
  new Topic("Probability and Statistics", TopicTypes.Concepts),
  new Topic("Shortest Path", TopicTypes.Concepts),
  new Topic("Hash Function", TopicTypes.Concepts),
  new Topic("Geometry", TopicTypes.Concepts),
  new Topic("Dynamic Programming", TopicTypes.Concepts),
  new Topic("Counting", TopicTypes.Concepts),
  new Topic("Prefix Sum", TopicTypes.Concepts),
  new Topic("Strongly Connected Component", TopicTypes.Concepts),
  new Topic("Rolling Hash", TopicTypes.Concepts),
  new Topic("Recursion", TopicTypes.Concepts),
  new Topic("Memoization", TopicTypes.Concepts),
  new Topic("Backtracking", TopicTypes.Concepts),

  new Topic("Design", TopicTypes.Miscellaneous),
  new Topic("Brainteaser", TopicTypes.Miscellaneous),
  new Topic("Simulation", TopicTypes.Miscellaneous),
  new Topic("Concurrency", TopicTypes.Miscellaneous),
  new Topic("Game Theory", TopicTypes.Miscellaneous),
  new Topic("Shell", TopicTypes.Miscellaneous),
  new Topic("Interactive", TopicTypes.Miscellaneous),
] as const;

export function getTopicByName(name: string): Topic {
  const result = ALL_TOPICS.find((topic) => topic.name === name);
  if (result === undefined) {
    throw Error();
  }
  return result;
}
